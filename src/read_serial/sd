Help on class Stream in module plotly.graph_objs.graph_objs:

class SSttrreeaamm(PlotlyDict)
 |  Valid attributes for 'stream' at path [] under parents ():
 |  
 |      ['maxpoints', 'token']
 |  
 |  Run `<stream-object>.help('attribute')` on any of the above.
 |  '<stream-object>' is the object at []
 |  
 |  Method resolution order:
 |      Stream
 |      PlotlyDict
 |      __builtin__.dict
 |      PlotlyBase
 |      __builtin__.object
 |  
 |  Methods inherited from PlotlyDict:
 |  
 |  ____ccooppyy____(self)
 |  
 |  ____ddeeeeppccooppyy____(self, memodict={})
 |  
 |  ____ddiirr____(self)
 |      Dynamically return the existing and possible attributes.
 |  
 |  ____ggeettaattttrr____(self, key)
 |      Python only calls this when key is missing!
 |  
 |  ____ggeettiitteemm____(self, key)
 |      Calls __missing__ when key is not found. May mutate object.
 |  
 |  ____iinniitt____(self, *args, **kwargs)
 |  
 |  ____mmiissssiinngg____(self, key)
 |      Mimics defaultdict. This is called from __getitem__ when key DNE.
 |  
 |  ____sseettaattttrr____(self, key, value)
 |      Maps __setattr__ onto __setitem__
 |  
 |  ____sseettiitteemm____(self, key, value, _raise=True)
 |      Validates/Converts values which should be Graph Objects.
 |  
 |  ffoorrccee__cclleeaann(self, **kwargs)
 |      Recursively remove empty/None values.
 |  
 |  ggeett__ddaattaa(self, flatten=False)
 |      Returns the JSON for the plot with non-data elements stripped.
 |  
 |  ggeett__oorrddeerreedd(self, **kwargs)
 |      Return a predictable, OrderedDict version of self.
 |  
 |  hheellpp(self, attribute=None, return_help=False)
 |      Print help string for this object or an attribute of this object.
 |      
 |      :param (str) attribute: A valid attribute string for this object.
 |      :param (bool) return_help: Return help_string instead of printing it?
 |      :return: (None|str)
 |  
 |  ssttrriipp__ssttyyllee(self)
 |      Recursively strip style from the current representation.
 |      
 |      All PlotlyDicts and PlotlyLists are guaranteed to survive the
 |      stripping process, though they made be left empty. This is allowable.
 |      
 |      Keys that will be stripped in this process are tagged with
 |      `'type': 'style'` in graph_objs_meta.json. Note that a key tagged as
 |      style, but with an array as a value may still be considered data.
 |  
 |  ttoo__ssttrriinngg(self, level=0, indent=4, eol='\n', pretty=True, max_chars=80)
 |      Returns a formatted string showing graph_obj constructors.
 |      
 |      :param (int) level: The number of indentations to start with.
 |      :param (int) indent: The indentation amount.
 |      :param (str) eol: The end of line character(s).
 |      :param (bool) pretty: Curtail long list output with a '..' ?
 |      :param (int) max_chars: The max characters per line.
 |      
 |      Example:
 |      
 |          print(obj.to_string())
 |  
 |  uuppddaattee(self, dict1=None, **dict2)
 |      Update current dict with dict1 and then dict2.
 |      
 |      This recursively updates the structure of the original dictionary-like
 |      object with the new entries in the second and third objects. This
 |      allows users to update with large, nested structures.
 |      
 |      Note, because the dict2 packs up all the keyword arguments, you can
 |      specify the changes as a list of keyword agruments.
 |      
 |      Examples:
 |      # update with dict
 |      obj = Layout(title='my title', xaxis=XAxis(range=[0,1], domain=[0,1]))
 |      update_dict = dict(title='new title', xaxis=dict(domain=[0,.8]))
 |      obj.update(update_dict)
 |      obj
 |      {'title': 'new title', 'xaxis': {'range': [0,1], 'domain': [0,.8]}}
 |      
 |      # update with list of keyword arguments
 |      obj = Layout(title='my title', xaxis=XAxis(range=[0,1], domain=[0,1]))
 |      obj.update(title='new title', xaxis=dict(domain=[0,.8]))
 |      obj
 |      {'title': 'new title', 'xaxis': {'range': [0,1], 'domain': [0,.8]}}
 |      
 |      This 'fully' supports duck-typing in that the call signature is
 |      identical, however this differs slightly from the normal update
 |      method provided by Python's dictionaries.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from PlotlyDict:
 |  
 |  ____ddiicctt____
 |      dictionary for instance variables (if defined)
 |  
 |  ____wweeaakkrreeff____
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from __builtin__.dict:
 |  
 |  ____ccmmpp____(...)
 |      x.__cmp__(y) <==> cmp(x,y)
 |  
 |  ____ccoonnttaaiinnss____(...)
 |      D.__contains__(k) -> True if D has a key k, else False
 |  
 |  ____ddeelliitteemm____(...)
 |      x.__delitem__(y) <==> del x[y]
 |  
 |  ____eeqq____(...)
 |      x.__eq__(y) <==> x==y
 |  
 |  ____ggee____(...)
 |      x.__ge__(y) <==> x>=y
 |  
 |  ____ggeettaattttrriibbuuttee____(...)
 |      x.__getattribute__('name') <==> x.name
 |  
 |  ____ggtt____(...)
 |      x.__gt__(y) <==> x>y
 |  
 |  ____iitteerr____(...)
 |      x.__iter__() <==> iter(x)
 |  
 |  ____llee____(...)
 |      x.__le__(y) <==> x<=y
 |  
 |  ____lleenn____(...)
 |      x.__len__() <==> len(x)
 |  
 |  ____lltt____(...)
 |      x.__lt__(y) <==> x<y
 |  
 |  ____nnee____(...)
 |      x.__ne__(y) <==> x!=y
 |  
 |  ____rreepprr____(...)
 |      x.__repr__() <==> repr(x)
 |  
 |  ____ssiizzeeooff____(...)
 |      D.__sizeof__() -> size of D in memory, in bytes
 |  
 |  cclleeaarr(...)
 |      D.clear() -> None.  Remove all items from D.
 |  
 |  ccooppyy(...)
 |      D.copy() -> a shallow copy of D
 |  
 |  ffrroommkkeeyyss(...)
 |      dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v.
 |      v defaults to None.
 |  
 |  ggeett(...)
 |      D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
 |  
 |  hhaass__kkeeyy(...)
 |      D.has_key(k) -> True if D has a key k, else False
 |  
 |  iitteemmss(...)
 |      D.items() -> list of D's (key, value) pairs, as 2-tuples
 |  
 |  iitteerriitteemmss(...)
 |      D.iteritems() -> an iterator over the (key, value) items of D
 |  
 |  iitteerrkkeeyyss(...)
 |      D.iterkeys() -> an iterator over the keys of D
 |  
 |  iitteerrvvaalluueess(...)
 |      D.itervalues() -> an iterator over the values of D
 |  
 |  kkeeyyss(...)
 |      D.keys() -> list of D's keys
 |  
 |  ppoopp(...)
 |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
 |      If key is not found, d is returned if given, otherwise KeyError is raised
 |  
 |  ppooppiitteemm(...)
 |      D.popitem() -> (k, v), remove and return some (key, value) pair as a
 |      2-tuple; but raise KeyError if D is empty.
 |  
 |  sseettddeeffaauulltt(...)
 |      D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D
 |  
 |  vvaalluueess(...)
 |      D.values() -> list of D's values
 |  
 |  vviieewwiitteemmss(...)
 |      D.viewitems() -> a set-like object providing a view on D's items
 |  
 |  vviieewwkkeeyyss(...)
 |      D.viewkeys() -> a set-like object providing a view on D's keys
 |  
 |  vviieewwvvaalluueess(...)
 |      D.viewvalues() -> an object providing a view on D's values
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from __builtin__.dict:
 |  
 |  ____hhaasshh____ = None
 |  
 |  ____nneeww____ = <built-in method __new__ of type object>
 |      T.__new__(S, ...) -> a new object with type S, a subtype of T
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from PlotlyBase:
 |  
 |  ttoo__ggrraapphh__oobbjjss(self, **kwargs)
 |      Everything is cast into graph_objs. Here for backwards compat.
 |  
 |  vvaalliiddaattee(self)
 |      Everything is *always* validated now. keep for backwards compat.
